Sure, here is the updated Python script that takes the project name as a command-line argument:

```python
import json
import sys

def get_project_path(project_name, config_file='config.json'):
    try:
        with open(config_file, 'r') as file:
            config_data = json.load(file)
        
        if project_name in config_data:
            return config_data[project_name]['path']
        else:
            return f"Project '{project_name}' not found in the config file."
    except FileNotFoundError:
        return f"Config file '{config_file}' not found."
    except json.JSONDecodeError:
        return f"Error decoding JSON from the config file '{config_file}'."

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python source.py <project_name>")
        sys.exit(1)

    project_name = sys.argv[1]
    path = get_project_path(project_name)
    print(f"The path for '{project_name}' is: {path}")
```

### Explanation
1. **Importing Modules**:
   The script imports the `json` module to work with JSON data and the `sys` module to handle command-line arguments.

2. **Function Definition (`get_project_path`)**:
   The function `get_project_path` takes two arguments:
   - `project_name`: The name of the project you want to find the path for.
   - `config_file`: The name of the JSON configuration file (defaults to `config.json`).

3. **Reading the JSON File**:
   The script attempts to open and read the `config.json` file. If the file is not found, it returns an error message.

4. **Loading JSON Data**:
   The content of the file is parsed as JSON. If there is an error in decoding the JSON, an error message is returned.

5. **Finding the Project Path**:
   The function checks if the given project name exists in the JSON data. If found, it returns the corresponding path. If not, it returns an error message indicating the project was not found.

6. **Command-Line Argument Handling**:
   The script checks if exactly one command-line argument is provided (the project name). If not, it prints the usage message and exits.

7. **Example Usage**:
   The script retrieves the project name from the command-line arguments, calls the `get_project_path` function with that input, and prints the resulting path.

### Usage
To use this script, save it as `source.py` and run it from the command line, providing the project name as an argument:

```sh
python source.py Project-1
```

This will output the path for `Project-1` as defined in the `config.json` file.
