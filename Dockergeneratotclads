Creating a Python class to generate a `Dockerfile` and `build.sh` file using a Jinja2 template involves a few steps. We will:

1. Install the `Jinja2` package.
2. Define the `DockerfileGenerator` class with methods to generate the `Dockerfile` and `build.sh` file.
3. Use a Jinja2 template for the `Dockerfile`.

### Step 1: Install Jinja2

Ensure you have Jinja2 installed. You can install it using pip:

```sh
pip install jinja2
```

### Step 2: Define the Python Class

Hereâ€™s a Python class to generate a `Dockerfile` and `build.sh` file:

```python
import os
from jinja2 import Environment, FileSystemLoader

class DockerfileGenerator:
    def __init__(self, template_dir='templates'):
        self.template_dir = template_dir
        self.env = Environment(loader=FileSystemLoader(self.template_dir))

    def generate_dockerfile(self, template_name, context, output_path='Dockerfile'):
        template = self.env.get_template(template_name)
        dockerfile_content = template.render(context)
        with open(output_path, 'w') as dockerfile:
            dockerfile.write(dockerfile_content)
        print(f"Dockerfile generated at {output_path}")

    def generate_build_sh(self, output_path='build.sh'):
        build_script = """#!/bin/bash

# Build the Docker image
docker build -t my_docker_image .

# Run the Docker container
docker run --rm my_docker_image
"""
        with open(output_path, 'w') as build_file:
            build_file.write(build_script)
        os.chmod(output_path, 0o755)  # Make the build script executable
        print(f"build.sh generated at {output_path}")

# Example usage
if __name__ == '__main__':
    generator = DockerfileGenerator()

    # Define the context for the Dockerfile template
    context = {
        'base_image': 'python:3.9-slim',
        'copy_files': [
            {'src': 'env_vars.txt', 'dest': '/usr/src/app/env_vars.txt'},
            {'src': 'export_env_vars.sh', 'dest': '/usr/src/app/export_env_vars.sh'}
        ],
        'run_commands': [
            'chmod +x /usr/src/app/export_env_vars.sh',
            './export_env_vars.sh'
        ]
    }

    # Generate Dockerfile
    generator.generate_dockerfile('Dockerfile.j2', context)

    # Generate build.sh
    generator.generate_build_sh()
```

### Step 3: Create a Jinja2 Template

Create a directory named `templates` and inside it, create a file named `Dockerfile.j2` with the following content:

```jinja2
# Use the official base image
FROM {{ base_image }}

# Copy files into the container
{% for file in copy_files %}
COPY {{ file.src }} {{ file.dest }}
{% endfor %}

# Set the working directory
WORKDIR /usr/src/app

# Run commands
{% for command in run_commands %}
RUN {{ command }}
{% endfor %}

# Optional: Define your main application command here
# CMD ["python", "your_app.py"]
```

### Explanation

1. **DockerfileGenerator Class**:
   - **__init__**: Initializes the class with the directory containing Jinja2 templates.
   - **generate_dockerfile**: Uses a Jinja2 template to generate a `Dockerfile` based on the provided context and writes it to the specified output path.
   - **generate_build_sh**: Creates a simple `build.sh` script to build and run the Docker image.

2. **Jinja2 Template (Dockerfile.j2)**:
   - Defines a basic Dockerfile structure using placeholders for the base image, files to copy, and commands to run.

3. **Example Usage**:
   - The script creates an instance of `DockerfileGenerator`, defines the context for the Dockerfile, and calls methods to generate the `Dockerfile` and `build.sh`.

### Step 4: Run the Script

To generate the `Dockerfile` and `build.sh`, run the script:

```sh
python your_script_name.py
```

Replace `your_script_name.py` with the actual name of your Python script file.

This will create a `Dockerfile` based on the provided template and context and a `build.sh` script to build and run the Docker image.
